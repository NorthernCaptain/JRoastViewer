/*
 * RoastSelector.java
 *
 * Created on 9 Март 2007 г., 20:39
 */

package jroastviewer;


import java.awt.Color;
import java.awt.Font;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.ListIterator;
import java.util.Vector;
import java.util.prefs.Preferences;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.jdesktop.swingx.calendar.DateSpan;
import org.jdesktop.swingx.table.TableColumnExt;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.ui.*;

/**
 *
 * @author  Leo
 */
public class RoastSelector extends javax.swing.JFrame {
    
    private String version = "1.1.0";
    
    /** Creates new form RoastSelector */
    public RoastSelector() {
        initComponents();
        RVOptions.getOpt().setDbgOut(logWin.getDbgOut());
        RVOptions.getOpt().dbg("Northern Roast Viewer v." + version + " started successfuly");
        this.setTitle(this.getTitle() + " v." + version);
        dayTable.setModel(daytm);
        loadOptions();
        dateFromPicker.getMonthView().setFirstDayOfWeek(2);
        dateToPicker.getMonthView().setFirstDayOfWeek(2);
        try
        {
            coffeepie = new JDBCPieDataset(RVOptions.getOpt().getDBC());
            roasterpie = new JDBCPieDataset(RVOptions.getOpt().getDBC());
            roasterpie2 = new JDBCPieDataset(RVOptions.getOpt().getDBC());
        }
        catch(SQLException e)
        {
            RVOptions.getOpt().err("Can't connect to DB for PieDataset:");
            RVOptions.getOpt().err(e.getMessage());
        }
        
        {
            dayChartPanel.setLayout(new BoxLayout(dayChartPanel, BoxLayout.Y_AXIS));
        
            JFreeChart jf = createChart("Coffee sorts by Weight (kg)",coffeepie);
            PiePlot plot= (PiePlot)jf.getPlot();
            plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0}\n{1}kg ({2})"));
            dayChartPanel.add(new ChartPanel(jf));
        }
                
        
        {
            roastersPanel.setLayout(new BoxLayout(roastersPanel, BoxLayout.Y_AXIS));
        
            JFreeChart jf = createChart("Roaster workload by Weight (kg)",roasterpie);
            PiePlot plot= (PiePlot)jf.getPlot();
            plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0}\n{1}kg ({2})"));
            roastersPanel.add(new ChartPanel(jf));
            jf.getLegend().setPosition(RectangleEdge.RIGHT);
        }
        
        {
            JFreeChart jf = createChart("Roaster workload by count of roasts",roasterpie2);
            PiePlot plot= (PiePlot)jf.getPlot();
            plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0}\n{1} ({2})"));
            roastersPanel.add(new ChartPanel(jf));
            jf.getLegend().setPosition(RectangleEdge.RIGHT);
        }


    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jXPanel2 = new org.jdesktop.swingx.JXPanel();
        monthChooser = new org.jdesktop.swingx.calendar.JXMonthView();
        jSeparator5 = new javax.swing.JSeparator();
        advFiltersCheck = new javax.swing.JCheckBox();
        dateFromPicker = new org.jdesktop.swingx.JXDatePicker();
        dateToPicker = new org.jdesktop.swingx.JXDatePicker();
        dateFromLbl = new javax.swing.JLabel();
        dateToLbl = new javax.swing.JLabel();
        outSKUCombo = new javax.swing.JComboBox();
        levelCombo = new javax.swing.JComboBox();
        dateFromBox = new javax.swing.JCheckBox();
        dateToBox = new javax.swing.JCheckBox();
        refreshBut = new javax.swing.JButton();
        viewRoastBut = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        totalRoastsLbl = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inpWeightLbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        inpSKULbl = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        outWeightLbl = new javax.swing.JLabel();
        outSKULbl = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        loadTimeLbl = new javax.swing.JLabel();
        unloadTimeLbl = new javax.swing.JLabel();
        workersLbl = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jXPanel1 = new org.jdesktop.swingx.JXPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dayTable = new org.jdesktop.swingx.JXTable();
        dayChartPanel = new org.jdesktop.swingx.JXPanel();
        roastersPanel = new org.jdesktop.swingx.JXPanel();
        statBar = new org.jdesktop.swingx.JXStatusBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        ToolMenu = new javax.swing.JMenu();
        fixerItem = new javax.swing.JMenuItem();
        OptionsMenu = new javax.swing.JMenu();
        OptionsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        LogMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Northern Roast Viewer for Blues Coffee Co.");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt)
            {
                formWindowDeactivated(evt);
            }
        });

        jXPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));
        monthChooser.setToolTipText("Select date to see roasts made that day");
        monthChooser.setFirstDayOfWeek(2);
        monthChooser.setTodayBackground(new java.awt.Color(255, 255, 153));
        monthChooser.setTraversable(true);
        monthChooser.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                monthChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout monthChooserLayout = new javax.swing.GroupLayout(monthChooser);
        monthChooser.setLayout(monthChooserLayout);
        monthChooserLayout.setHorizontalGroup(
            monthChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 203, Short.MAX_VALUE)
        );
        monthChooserLayout.setVerticalGroup(
            monthChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 172, Short.MAX_VALUE)
        );

        advFiltersCheck.setText("Advanced filters");
        advFiltersCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        advFiltersCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        advFiltersCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                advFiltersCheckActionPerformed(evt);
            }
        });

        dateFromPicker.setEnabled(false);

        dateToPicker.setEnabled(false);

        dateFromLbl.setText("From:");
        dateFromLbl.setEnabled(false);

        dateToLbl.setText("To:");
        dateToLbl.setEnabled(false);

        outSKUCombo.setEnabled(false);

        levelCombo.setEnabled(false);

        dateFromBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        dateFromBox.setEnabled(false);
        dateFromBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dateFromBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                dateFromBoxActionPerformed(evt);
            }
        });

        dateToBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        dateToBox.setEnabled(false);
        dateToBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dateToBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                dateToBoxActionPerformed(evt);
            }
        });

        refreshBut.setText("Refresh");
        refreshBut.setEnabled(false);
        refreshBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                refreshButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jXPanel2Layout = new javax.swing.GroupLayout(jXPanel2);
        jXPanel2.setLayout(jXPanel2Layout);
        jXPanel2Layout.setHorizontalGroup(
            jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outSKUCombo, 0, 203, Short.MAX_VALUE)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jXPanel2Layout.createSequentialGroup()
                        .addComponent(dateFromBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFromLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(dateFromPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jXPanel2Layout.createSequentialGroup()
                        .addComponent(advFiltersCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(refreshBut))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jXPanel2Layout.createSequentialGroup()
                        .addComponent(dateToBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateToLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(dateToPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(monthChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(levelCombo, 0, 203, Short.MAX_VALUE))
                .addContainerGap())
        );
        jXPanel2Layout.setVerticalGroup(
            jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel2Layout.createSequentialGroup()
                .addComponent(monthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advFiltersCheck)
                    .addComponent(refreshBut, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(dateFromBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateFromLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateFromPicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateToBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateToLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateToPicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addComponent(outSKUCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(levelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        viewRoastBut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jroastviewer/images/24/button_ok.png")));
        viewRoastBut.setText("View Roast");
        viewRoastBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                viewRoastButActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Totals"));
        jLabel1.setText("Roasts:");

        totalRoastsLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalRoastsLbl.setText("0");

        jLabel2.setText("Inp Weight:");

        inpWeightLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inpWeightLbl.setText("0.0");

        jLabel3.setText("Inp SKUs:");

        inpSKULbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inpSKULbl.setText("0");

        jLabel4.setText("Out Weight:");

        jLabel5.setText("Out SKUs:");

        outWeightLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        outWeightLbl.setText("0.0");

        outSKULbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        outSKULbl.setText("0");

        jLabel6.setText("Start time:");

        jLabel7.setText("End time:");

        jLabel8.setText("Workers:");

        loadTimeLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        loadTimeLbl.setText("0");

        unloadTimeLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        unloadTimeLbl.setText("0");

        workersLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        workersLbl.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalRoastsLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
            .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inpWeightLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inpSKULbl, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outWeightLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outSKULbl, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
            .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(workersLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(unloadTimeLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(loadTimeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(totalRoastsLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inpWeightLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(inpSKULbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(outWeightLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(outSKULbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(loadTimeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(unloadTimeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(workersLbl))
                .addContainerGap(122, Short.MAX_VALUE))
        );

        dayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        dayTable.setHorizontalScrollEnabled(true);
        jScrollPane1.setViewportView(dayTable);

        javax.swing.GroupLayout jXPanel1Layout = new javax.swing.GroupLayout(jXPanel1);
        jXPanel1.setLayout(jXPanel1Layout);
        jXPanel1Layout.setHorizontalGroup(
            jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE)
                .addContainerGap())
        );
        jXPanel1Layout.setVerticalGroup(
            jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Day roasts", jXPanel1);

        javax.swing.GroupLayout dayChartPanelLayout = new javax.swing.GroupLayout(dayChartPanel);
        dayChartPanel.setLayout(dayChartPanelLayout);
        dayChartPanelLayout.setHorizontalGroup(
            dayChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 940, Short.MAX_VALUE)
        );
        dayChartPanelLayout.setVerticalGroup(
            dayChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 745, Short.MAX_VALUE)
        );
        jTabbedPane1.addTab("Day charts", dayChartPanel);

        javax.swing.GroupLayout roastersPanelLayout = new javax.swing.GroupLayout(roastersPanel);
        roastersPanel.setLayout(roastersPanelLayout);
        roastersPanelLayout.setHorizontalGroup(
            roastersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 940, Short.MAX_VALUE)
        );
        roastersPanelLayout.setVerticalGroup(
            roastersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 745, Short.MAX_VALUE)
        );
        jTabbedPane1.addTab("Roasters", roastersPanel);

        FileMenu.setText("File");
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jroastviewer/images/16/gnome-logout.png")));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });

        FileMenu.add(jMenuItem1);

        jMenuBar1.add(FileMenu);

        ToolMenu.setText("Tools");
        fixerItem.setText("Roast Fixer");
        fixerItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fixerItemActionPerformed(evt);
            }
        });

        ToolMenu.add(fixerItem);

        jMenuBar1.add(ToolMenu);

        OptionsMenu.setText("Options");
        OptionsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jroastviewer/images/16/gtk-save.png")));
        OptionsMenuItem.setLabel("Options");
        OptionsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                OptionsMenuItemActionPerformed(evt);
            }
        });

        OptionsMenu.add(OptionsMenuItem);

        OptionsMenu.add(jSeparator1);

        LogMenuItem.setText("Log window");
        LogMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                LogMenuItemActionPerformed(evt);
            }
        });

        OptionsMenu.add(LogMenuItem);

        jMenuBar1.add(OptionsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 945, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jXPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewRoastBut, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(statBar, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jXPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewRoastBut))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statBar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fixerItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fixerItemActionPerformed
    {//GEN-HEADEREND:event_fixerItemActionPerformed
        fixerWin.setVisible(true);
    }//GEN-LAST:event_fixerItemActionPerformed

    private void dateToBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_dateToBoxActionPerformed
    {//GEN-HEADEREND:event_dateToBoxActionPerformed
        dateToPicker.setEnabled(dateToBox.isSelected());
    }//GEN-LAST:event_dateToBoxActionPerformed

    private void dateFromBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_dateFromBoxActionPerformed
    {//GEN-HEADEREND:event_dateFromBoxActionPerformed
        dateFromPicker.setEnabled(dateFromBox.isSelected());
    }//GEN-LAST:event_dateFromBoxActionPerformed

    private void refreshButActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_refreshButActionPerformed
    {//GEN-HEADEREND:event_refreshButActionPerformed
        refreshData();
    }//GEN-LAST:event_refreshButActionPerformed

    private void advFiltersCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_advFiltersCheckActionPerformed
    {//GEN-HEADEREND:event_advFiltersCheckActionPerformed
        refreshBut.setEnabled(advFiltersCheck.isSelected());
        dateFromBox.setEnabled(advFiltersCheck.isSelected());
        dateFromLbl.setEnabled(advFiltersCheck.isSelected());
        dateToBox.setEnabled(advFiltersCheck.isSelected());
        dateToLbl.setEnabled(advFiltersCheck.isSelected());
        outSKUCombo.setEnabled(advFiltersCheck.isSelected());
        levelCombo.setEnabled(advFiltersCheck.isSelected());
        
        if(!advFiltersCheck.isSelected() || outSKUCombo.getItemCount()>1)
            return;
        
        String sql = "select full_name from v_roast_sku order by 1";
        try
        {
            outSKUCombo.removeAllItems();
            outSKUCombo.addItem(new String(""));
            Connection con = RVOptions.getOpt().getDBC();
            Statement sta = con.createStatement();
            ResultSet rs = sta.executeQuery(sql);
            while(rs.next())
            {
                outSKUCombo.addItem(rs.getString("full_name"));
            }
            
            sql = "select full_name from v_roast_level order by 1";
            
            levelCombo.removeAllItems();
            levelCombo.addItem(new String(""));
            rs = sta.executeQuery(sql);
            while(rs.next())
            {
                levelCombo.addItem(rs.getString("full_name"));
            }
            sta.close();
            RVOptions.getOpt().retDBC(con);
        }
        catch(SQLException e)
        {
            RVOptions.getOpt().err("Can't execute refresh filters query");
            RVOptions.getOpt().err(e.getMessage());
        }
                
    }//GEN-LAST:event_advFiltersCheckActionPerformed

    private void formWindowDeactivated(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowDeactivated
    {//GEN-HEADEREND:event_formWindowDeactivated
        saveOptions();
    }//GEN-LAST:event_formWindowDeactivated

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        saveOptions();
    }//GEN-LAST:event_formWindowClosing

    private void saveOptions()
    {
         RVOptions.getOpt().saveOptions();
         Preferences pref = RVOptions.getOpt().getPref();
         for(int i = 0; i<dayTable.getColumnCount(true);i++)
         {
             TableColumnExt col = dayTable.getColumnExt(i);
             pref.putInt("dayTable.colwidth."+ dayTable.getColumnName(i),col.getPreferredWidth());
         }
    }
    
    private void loadOptions()
    {
         RVOptions.getOpt().loadOptions();
         Preferences pref = RVOptions.getOpt().getPref();
         for(int i = 0; i<dayTable.getColumnCount(true);i++)
         {
             TableColumnExt col = dayTable.getColumnExt(i);
             col.setPreferredWidth(pref.getInt("dayTable.colwidth."+ dayTable.getColumnName(i),col.getPreferredWidth()));
             RVOptions.getOpt().dbg("Column width for dayTable.colwidth."+dayTable.getColumnName(i) + " = " +
                     Integer.toString(pref.getInt("dayTable.colwidth."+ dayTable.getColumnName(i),col.getPreferredWidth())));
         }        
    }
    
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        saveOptions();
    }//GEN-LAST:event_formWindowClosed

    private void viewRoastButActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_viewRoastButActionPerformed
    {//GEN-HEADEREND:event_viewRoastButActionPerformed
        int col;
        final int rows[] = dayTable.getSelectedRows();
        if(rows.length<=0)
        {
            JOptionPane.showMessageDialog(this.getParent(),
                            "Nothing is selected in the grid!\nPlease, select some rows in the grid and try again ...",
                            "Nothing is selected",
                            JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for(col=0;col<dayTable.getColumnCount();col++)
            if(dayTable.getColumnName(col).equals("Id"))
                break;
        for(int i = 0; i<rows.length; i++)
        {
            int j;
            Integer id = (Integer)dayTable.getValueAt(rows[i], col);
            RVOptions.getOpt().dbg("Selected id: " + id);
            for(j=0;j<graphs.size();j++)
            {
                if(graphs.get(j).getID() == id)
                {
                    graphs.get(j).setVisible(true);
                    break;
                }
            }
            if(j>=graphs.size())
            {
                RoastGraph rsel = new RoastGraph(id);
                rsel.setVisible(true);
                graphs.add(rsel);
            }
        }
    }//GEN-LAST:event_viewRoastButActionPerformed

    
    private void LogMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_LogMenuItemActionPerformed
    {//GEN-HEADEREND:event_LogMenuItemActionPerformed
        logWin.setVisible(true);
    }//GEN-LAST:event_LogMenuItemActionPerformed

    private void OptionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionsMenuItemActionPerformed
        optWin.setVisible(true);
    }//GEN-LAST:event_OptionsMenuItemActionPerformed

    private String getFiltersWhere()
    {
        String sql = getDateWhere();
        
        if(levelCombo.isEnabled() && !((String)levelCombo.getSelectedItem()).equals(""))
        {
              sql += " and roastLevels.roastLevelFullName='" + (String)levelCombo.getSelectedItem() + "'";
        }
        
        if(outSKUCombo.isEnabled() && !((String)outSKUCombo.getSelectedItem()).equals(""))
        {
            sql += " and osku.skuName='" + (String)outSKUCombo.getSelectedItem() + "'";
        }
        
        return sql;
    }
    
    private String getDateWhere()
    {
        String sql = "";
        if(dateFromBox.isSelected() || dateToBox.isSelected())
        {
            if(dateFromBox.isSelected() && dateFromPicker.getDate()!=null)
                sql += " and roastLoad>='" + new SimpleDateFormat("dd-MM-yyyy 00:00").format(dateFromPicker.getDate()) + "'";
             if(dateToBox.isSelected() && dateToPicker.getDate()!=null)
                sql += " and roastLoad<='" + new SimpleDateFormat("dd-MM-yyyy 23:59:59").format(dateToPicker.getDate()) + "'";           
        } else
        {
          DateSpan ds = monthChooser.getSelectedDateSpan();
          Date day = ds == null ? new Date() : ds.getStartAsDate();
          sql += " and roastLoad>='";
          sql += new SimpleDateFormat("dd-MM-yyyy 00:00").format(day);
          sql += "' and roastLoad <= '" + new SimpleDateFormat("dd-MM-yyyy 23:59:59").format(day) + "'";
        } 
        return sql;
    }
    
    private void    refreshData()
    {
        String sql = "select count(roastInputSkuID) as roasts," 
                + "count(DISTINCT roastInputSkuID) as inpSKUs, coalesce(sum(roastInputQTY),0) as inpWeight, "
                + "count( DISTINCT roastOutputSkuID) as outSKUs, coalesce(sum(roastOutputQTY), 0) as outWeight,"
                + "coalesce(min(roastLoad), '01-01-1970 00:00') as startTime, coalesce(max(roastUnload), '01-01-1970 00:00') as endTime,"
                + "count(DISTINCT roastWorkerLNK) as workers "
                + "from roast, sku osku, roastLevels where roast.roastOutputSkuID=osku.skuID and roast.roastLevelLNK=roastLevels.roastLevelID";
        String where = getFiltersWhere();
        sql += where;
        try
        {
            statBar.setTrailingMessage("Connecting to DB...");
            Connection con = RVOptions.getOpt().getDBC();
            Statement sta = con.createStatement();
            statBar.setTrailingMessage("Querying totals...");
            ResultSet rs = sta.executeQuery(sql);
            if(!rs.next())
            {
                RVOptions.getOpt().err("Can't fetch any data for total day query.");
            }
            totalRoastsLbl.setText(rs.getString("roasts"));
            inpWeightLbl.setText(Double.toString(rs.getDouble("inpWeight")/1000.0));
            inpSKULbl.setText(rs.getString("inpSKUs"));
            outWeightLbl.setText(Double.toString(rs.getDouble("outWeight")/1000.0));
            outSKULbl.setText(rs.getString("outSKUs"));
            workersLbl.setText(rs.getString("workers"));
            loadTimeLbl.setText(new SimpleDateFormat("HH:mm").format(rs.getTimestamp("startTime")));
            unloadTimeLbl.setText(new SimpleDateFormat("HH:mm").format(rs.getTimestamp("endTime")));

            {
            sql = "select osku.skuName oskuName, sum(roastOutputQTY)/1000.0 from roast, sku osku, roastLevels "
                    + " where roast.roastOutputSkuID=osku.skuID and roast.roastLevelLNK=roastLevels.roastLevelID "
                  + where;
            sql += " group by osku.skuName order by 1";
            RVOptions.getOpt().dbg("CoffeePie sql query: " + sql);
            List l = coffeepie.getKeys();
            ListIterator it = l.listIterator();
            while(it.hasNext())
            {
                coffeepie.remove((Comparable)it.next());
            }
            coffeepie.executeQuery(con,sql);
            RVOptions.getOpt().retDBC(con);
            
            }
            
            {
            sql = "select worker.workerFullname, sum(roastOutputQTY)/1000.0 "
                  + "from roast, worker "
                  + "where roast.roastWorkerLNK=worker.workerID "
                  + getDateWhere();
            sql += " group by worker.workerFullname order by 1";
            RVOptions.getOpt().dbg("RoasterPie sql query: " + sql);
            
            List l = roasterpie.getKeys();
            ListIterator it = l.listIterator();
            while(it.hasNext())
            {
                roasterpie.remove((Comparable)it.next());
            }
            roasterpie.executeQuery(con,sql);
            RVOptions.getOpt().retDBC(con);
            }

            {
            sql = "select worker.workerFullname, count(*) as roasts "
                  + "from roast, worker "
                  + "where roast.roastWorkerLNK=worker.workerID "
                  + getDateWhere();
            sql += " group by worker.workerFullname order by 1";
            RVOptions.getOpt().dbg("RoasterPie2 sql query: " + sql);
            List l = roasterpie2.getKeys();
            ListIterator it = l.listIterator();
            while(it.hasNext())
            {
                roasterpie2.remove((Comparable)it.next());
            }
            roasterpie2.executeQuery(con,sql);
            RVOptions.getOpt().retDBC(con);
            }
            
        }
        catch(SQLException e)
        {
            RVOptions.getOpt().err("Can't execute total day query");
            RVOptions.getOpt().err(e.getMessage());
        }
        statBar.setTrailingMessage("Querying grid...");
        daytm.initSQL(where);
        statBar.setTrailingMessage("Done.");        
    }
    
    private void monthChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthChooserActionPerformed

        dateFromBox.setSelected(false);
        dateFromPicker.setEnabled(false);
        dateToBox.setSelected(false);
        dateToPicker.setEnabled(false);
        refreshData();      

    }//GEN-LAST:event_monthChooserActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        saveOptions();
        java.lang.System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
     private JFreeChart createChart(String title, PieDataset piedataset)
    {
        JFreeChart jfreechart = ChartFactory.createPieChart3D(title, piedataset, true, true, false);
        TextTitle texttitle = jfreechart.getTitle();
        texttitle.setToolTipText("A title tooltip!");
        PiePlot3D pieplot = (PiePlot3D)jfreechart.getPlot();
        pieplot.setLabelFont(new Font("SansSerif", 0, 12));
        pieplot.setNoDataMessage("No data available");
        pieplot.setCircular(false);
        pieplot.setLabelGap(0.02D);
        pieplot.setStartAngle(90D);
        pieplot.setForegroundAlpha(0.85F);
        pieplot.setDepthFactor(0.1D);
//        pieplot.setExplodePercent(0, 0.29999999999999999D);
//        pieplot.setLabelGenerator(new CustomLabelGenerator()); 
        return jfreechart;
    }

     
     private JFreeChart createCatChart(String title, CategoryDataset dataset)
    {
        JFreeChart jfreechart = ChartFactory.createBarChart(title, "Sort", "Value (kg)", dataset, PlotOrientation.VERTICAL, false, true, false);
        jfreechart.setBackgroundPaint(Color.lightGray);
        return jfreechart;
    }
     
   /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try
        {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception ex)
        {
            try
            {
                UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
            }
            catch (Exception ex2)
            {
            }
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoastSelector().setVisible(true);
            }
        });
    }
    
    private RFixer fixerWin = new RFixer();
    private OptWin optWin = new OptWin();
    private LogWin logWin = new LogWin();
    private DayTableModel daytm = new DayTableModel();
    private JDBCPieDataset coffeepie = null;
    private JDBCPieDataset roasterpie = null;
    private JDBCPieDataset roasterpie2 = null;
    private JDBCCategoryDataset coffeecat = null;
    private Vector<RoastGraph> graphs = new Vector<RoastGraph>();
    private DefaultComboBoxModel graphsComboModel = new DefaultComboBoxModel();

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem LogMenuItem;
    private javax.swing.JMenu OptionsMenu;
    private javax.swing.JMenuItem OptionsMenuItem;
    private javax.swing.JMenu ToolMenu;
    private javax.swing.JCheckBox advFiltersCheck;
    private javax.swing.JCheckBox dateFromBox;
    private javax.swing.JLabel dateFromLbl;
    private org.jdesktop.swingx.JXDatePicker dateFromPicker;
    private javax.swing.JCheckBox dateToBox;
    private javax.swing.JLabel dateToLbl;
    private org.jdesktop.swingx.JXDatePicker dateToPicker;
    private org.jdesktop.swingx.JXPanel dayChartPanel;
    private org.jdesktop.swingx.JXTable dayTable;
    private javax.swing.JMenuItem fixerItem;
    private javax.swing.JLabel inpSKULbl;
    private javax.swing.JLabel inpWeightLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private org.jdesktop.swingx.JXPanel jXPanel1;
    private org.jdesktop.swingx.JXPanel jXPanel2;
    private javax.swing.JComboBox levelCombo;
    private javax.swing.JLabel loadTimeLbl;
    private org.jdesktop.swingx.calendar.JXMonthView monthChooser;
    private javax.swing.JComboBox outSKUCombo;
    private javax.swing.JLabel outSKULbl;
    private javax.swing.JLabel outWeightLbl;
    private javax.swing.JButton refreshBut;
    private org.jdesktop.swingx.JXPanel roastersPanel;
    private org.jdesktop.swingx.JXStatusBar statBar;
    private javax.swing.JLabel totalRoastsLbl;
    private javax.swing.JLabel unloadTimeLbl;
    private javax.swing.JButton viewRoastBut;
    private javax.swing.JLabel workersLbl;
    // End of variables declaration//GEN-END:variables
    
}
